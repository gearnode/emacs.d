# -*- mopde: snippet -*-
# name: gen_server
# --
%% Copyright (c) 2021 Bryan Frimin <$1>.
%%
%% Permission to use, copy, modify, and/or distribute this software for any
%% purpose with or without fee is hereby granted, provided that the above
%% copyright notice and this permission notice appear in all copies.
%%
%% THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
%% WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
%% MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
%% SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
%% WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
%% ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
%% IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

-module(`(file-name-nondirectory
              (file-name-sans-extension (or (buffer-file-name) (buffer-name))))`).

-include_lib("kernel/include/logger.hrl").

-behaviour(gen_server).

-export([start_link/1, init/1,
         terminate/2, stop/1,
         handle_call/3, handle_cast/2, handle_info/2]).

-type options() :: map().

-type state() :: map().

-type start_ret() :: {ok, pid()} | ignore | {error, term()}.


-type ref() :: pid()
             | atom()
             | {atom(), node()}
             | {global, atom()}
             | {via, module(), term()}.

-type init_ret() ::
        {ok, state()}
      | {ok, state(), timeout() | hibernate | {continue, term()}}
      | {stop, Reason :: term()}
      | ignore.

-type terminate_reason() :: normal | shutdown | {shutdown, term()} | term().

-type handle_call_ret() ::
        {reply, Reply :: term(), state()}
      | {reply, Reply :: term(), state(),
         timeout() | hibernate | {continue, term()}} | {noreply, state()}
      | {noreply, state(), timeout() | hibernate | {continue, term()}}
      | {stop, Reason :: term(), Reply :: term(), state()}
      | {stop, Reason :: term(), state()}.

-type handle_cast_ret() ::
        {noreply, state()}
      | {noreply, state(), timeout() | hibernate | {continue, term()}}
      | {stop, Reason :: term(), state()}.

-type handle_info_ret() ::
        {noreply, state()}
      | {noreply, state(), timeout() | hibernate | {continue, term()}}
      | {stop, Reason :: term(), state()}.

-spec start_link(options()) -> start_ret().
start_link(Options) ->
  gen_server:start_link(?MODULE, [Options], []).

-spec stop(ref()) -> ok.
stop(Ref) ->
  gen_server:stop(Ref, normal, infinity).

-spec init(list()) -> init_ret().
init([Options]) ->
  logger:update_process_metadata(#{domain => [$2]}),
  {ok, #{}}.

-spec terminate(terminate_reason(), state()) -> ok.
terminate(_Reason, _State) ->
  ok.

-spec handle_call(term(), {pid(), term()}, state()) -> handle_call_ret().
handle_call(Msg, From, State) ->
  ?LOG_WARNING("unhandled call ~p from ~p", [Msg, From]),
  {reply, unhandled, State}.

-spec handle_cast(term(), state()) -> handle_cast_ret().
handle_cast(Msg, State) ->
  ?LOG_WARNING("unhandled cast ~p", [Msg]),
  {noreply, State}.

-spec handle_info(term(), state()) -> handle_info_ret().
handle_info(Msg, State) ->
  ?LOG_WARNING("unhandled info ~p", [Msg]),
  {noreply, State}.
