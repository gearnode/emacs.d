#+TITLE: GNU Emacs configuration file
#+AUTHOR: Bryan Frimin
#+EMAIL: bryan@frimin.fr

* Basic configuration
** Rainbow mode
:PROPERTIES:
:CUSTOM_ID: h:rainbow-mode
:END:

This package is a minor mode to set background color to strings that
match color name.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :straight t
    :config
    (setq rainbow-ansi-colors nil)
    (setq rainbow-x-colors nil))
#+END_SRC

* Selection and search methods
** Projects (projectile)
#+BEGIN_SRC emacs-lisp
#+END_SRC

** ripgrep (rg.el)
#+BEGIN_SRC emacs-lisp
#+END_SRC

* Application and utilities
This section contains configuration for programs like email clients, new
readers, etc.

** Interactive Git (magit)
Magit is an interactive Git frontend.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :bind
    ("C-c g" . magit-status))
#+END_SRC

Configure commit style.
#+BEGIN_SRC emacs-lisp
  (use-package git-commit
    :after magit
    :config
    (setq git-commit-summary-max-length 50)
    (setq git-commit-known-pseudo-headers
	  '("Signed-off-by"
	    "Modified-by"
	    "Cc"
	    "Suggested-by"
	    "Reported-by"))
    (setq git-commit-style-convention-checks
	  '(non-empty-second-line
	    overlong-summary-line)))
#+END_SRC

Highlight changes whithin a line, not just the line itself.
#+BEGIN_SRC emacs-lisp
  (use-package magit-diff
    :after magit
    :config
    (setq magit-diff-refine-hunk t))
#+END_SRC

* Interface and interactions
** Go to last change
ctrl-z for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package goto-last-change
    :straight t
    :bind ("C-z" . goto-last-change))
#+END_SRC

** Narrowing selections (helm)
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :straight t
    :ensure t
    :config
    (helm-mode 1)
    (setq helm-always-two-window nil)
    (setq helm-default-display-buffer-functions '(display-buffer-in-side-window))
    (setq helm-display-buffer-default-height 16)
    (setq helm-buffer-max-length 30)
    (setq helm-boring-buffer-regexp-list
	  (list
	   "\\*"
	   "\\*Echo Area"
	   "\\*Minibuf"
	   "\\*Shell Command Output\\*"
	   "\\*helm "
	   "\\*godoc "))
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
    (global-set-key (kbd "C-x C-f") 'helm-find-files))
#+END_SRC
** Highlight comment keywords (hl-todo)
This tool apply highlighting to keyword that are normally used in code
comments.

#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :straight t
    :config
    (setq hl-todo-keyword-faces
	  '(("TODO"  . "#FF0000")
	    ("DEBUG" . "#1E90FF")
	    ("XXX"   . "#1E90FF")))
    :hook (prog-mode-hook . hl-todo-mode))
#+END_SRC

** Auto revert mode
This mode ensures that the buffer is updated whenever the file
changes. A change can happen externally or by some other tool inside of
Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :diminish
    :config
    (setq auto-revert-verbose t)
    :hook
    (after-init-hook . global-auto-revert-mode))
#+END_SRC

** Newline characters for file ending
This mode will add a newline character when visiting or saving a buffer
relevance.

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (setq mode-require-final-newline 'visit-save))
#+END_SRC

* Language settings for prose and code
This section contains configuration for natural or programming
language enhancement.

** Support for various major modes
These provide syntax highlighting and additional features for
environments that are not already supported by Emacs.

*** Markdown (markdown-mode)
This adds support for markdown file.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t
    :config
    ;; Enable editing of code block in indirect buffers using `C-c '`
    (use-package edit-indirect :straight t)
    (setq markdown-fontify-code-blocks-natively t)
    :mode
    ("\\.md$"))
#+END_SRC

*** YAML (yaml-mode)
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode
    ("\\.yaml$" "\\.yml$"))
#+END_SRC

*** CSS (css-mode)
Disable color previews as it's already manage by the =rainbow-mode=
(see [[#h:rainbow-mode][relevant section]]).
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :mode
    (("\\.css$" . css-mode)
     ("\\.scss$" . scss-mode))
    :config
    (setq css-font-fontify-colors nil))
#+END_SRC

*** Shell scripts (sh-mode)
Enable =sh-mode= in various files that are not obvious shell scripts.
#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :mode
    (("PKGBUILD" . sh-mode)))
#+END_SRC

** Line length (column count)
The standard line lengh is 80 characters. Having something less allows
such things like quoting text, indent, etc.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (setq-default fill-column 72)
    :hook
    (after-init-hook . column-number-mode))
#+END_SRC

** Recognize subwords
Understand =camelCaseWords= as many words instead of one long word.
#+BEGIN_SRC emacs-lisp
  (use-package subword
    :diminish
    :hook
    (prog-mode-hook . subword-mode))
#+END_SRC

** Comment
Basic configuration for the =newcomment= mode.

- Replace =M-;= by =C-;=
- Remove comment with =C-:=
- Ident comment with =M-;=

#+BEGIN_SRC emacs-lisp
  (use-package newcomment
    :config
    (setq comment-multi-line t)
    (setq comment-style 'multi-line)
    (setq comment-fill-column nil)
    (setq comment-empty-lines t)

    (defun gearnode/comment (&optional arg)
      (interactive "*P")
      (if (use-region-p)
	  (comment-dwim arg)
	(save-excursion
	  (comment-line arg))))

    :bind
    (("C-;" . gearnode/comment)
     ("C-:" . comment-kill)
     ("M-;" . comment-indent)))
#+END_SRC

* History and state
This sections contains configuration for Emacs state and history
management.

** Emacs desktop
Keep Emacs opened buffers after crash or kill.

#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :config
    (setq desktop-auto-save-timeout 300)
    (setq desktop-dirname "~/.emacs.d/")
    (setq desktop-base-file-name "desktop")
    (setq desktop-files-not-to-save nil)
    (setq desktop-globals-to-clean nil)
    (setq desktop-load-locked-desktop t)
    (setq desktop-missing-file-warning nil)
    (setq desktop-restore-eager 0)
    (setq desktop-restore-frames nil)
    (setq desktop-save 'ask-if-new)
    (desktop-save-mode 1))
#+END_SRC

Ensure Emacs starts in the =*scratch*= buffer.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    (setq initial-buffer-choice t)
    (setq inhibit-startup-echo-area-message "gearnode")
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-buffer-menu t))
#+END_SRC

** Record cursor position
Remember where the point is in any given file.

#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config
    (setq save-place-file "~/.emacs.d/saveplace")
    (setq save-place-forget-unreadable-file t)
    (save-place-mode 1))
#+END_SRC

** Minibuffer history (savehist-mode)
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :config
    (setq savehist-file "~/.emacs.d/savehist")
    (setq history-length 1000)
    (setq history-delete-duplicates t)
    (setq savehist-save-minibuffer-history t)
    :hook
    (after-init-hook . savehist-mode))
#+END_SRC
